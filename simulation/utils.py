import numpy as np
import glob
from scipy.io import loadmat

def gaussian_1D(t, t_fwhm, peak_power):
    """
    Create a 1D Gaussian pulse
    """
    # Calculate the standard deviation from the FWHM
    sigma = t_fwhm / (2 * np.sqrt(2 * np.log(2)))

    # Create the Gaussian pulse
    E0 = np.sqrt(peak_power) * np.exp(-((t)**2) / (2 * sigma**2))

    return E0

def unit_conversion(betas, order):
    # Convert units from fs^n/mm to s^n/m
    # For each dispersion order n, multiply by (0.001)^(-n)
    # Order 0: 1/mm -> 1/m (multiply by 1000)
    # Order 1: fs/mm -> s/m (multiply by 10^-12)
    # Order 2: fs^2/mm -> s^2/m (multiply by 10^-24)
    # Order 3: fs^3/mm -> s^3/m (multiply by 10^-42)
    # ...and so on

    # Create conversion factors for each dispersion order
    n =np.arange(0, order + 1, 1)
    unit_conversion = 1e-15 ** n  * 1e3
    
    # Reshape to column vector
    unit_conversion = unit_conversion.reshape(-1, 1)

    # Apply conversion to betas (assuming betas is already transposed as in your code)
    betas_converted = betas * unit_conversion

    return betas_converted

def load_dispersion(folder_name, order):
    """
    Load dispersion from matlab file generated by the mode solver
    """
    # Load .mat file
    # file_name = os.path.join(folder_name, f'betas.mat')
    file_name = glob.glob(f'{folder_name}/betas*.mat')[0]
    try:
        mat_data = loadmat(file_name)
    except FileNotFoundError:
        raise FileNotFoundError(f"No .mat file found in {folder_name}.")

    # Assuming the key for the beta matrix is 'beta_matrix' (adjust if needed)
    if "betas" not in mat_data:
        raise KeyError("The .mat file must contain the key 'beta_matrix'.")
    
    # Extract beta matrix
    betas = mat_data['betas']  # Shape: (4, mode_num)
    order = betas.shape[0] - 1

    betas = unit_conversion(betas, order)
    return betas

def load_coupling_tensor(folder_name):
    """
    Load coupling tensor from matlab file generated by the mode solver
    """
    # Load .mat file
    file_name = glob.glob(f'{folder_name}/S_tensors_*.mat')[0]
    try:
        mat_data = loadmat(file_name)
    except FileNotFoundError:
        raise FileNotFoundError(f"No .mat file found in {folder_name}.")

    # Assuming the key for the coupling tensor is 'SR' (adjust if needed)
    if "SR" not in mat_data:
        raise KeyError("The .mat file must contain the key 'SR'.")
    
    # Extract coupling tensor
    SR = mat_data['SR']  # Shape: (3, 3, mode_num, mode_num)

    return SR